# 병원 예약 웹 서비스 기능 개선 PRD

## 1. 개요

현재 병원 예약 웹 서비스(prpc)는 환자가 온라인(bookings/create/)으로 예약을 진행하고, 병원 직원(슈퍼유저)은 관리자 페이지(supers/supercreate/)에서 전화 예약을 관리하고 있습니다. 전화 상담 중인 특정 시간대에 온라인 예약이 동시에 발생하는 문제점을 해결하기 위해, 직원이 전화 상담 중인 시간대에 대해 온라인 예약을 일시적으로 차단하고, 일정 시간 후 자동으로 차단이 해제되는 기능을 구현합니다.

## 2. 목표

*   슈퍼유저가 특정 시간대를 '전화상담중' 상태로 임시 차단하여 온라인 예약자가 해당 시간대에 예약하지 못하도록 합니다.
*   온라인 예약자는 차단된 시간대에서도 초기에는 '예약가능'으로 보이지만, 예약 신청 시도 시 차단 알림 메시지를 받습니다.
*   임시 차단 상태는 설정된 시간(3분) 후 자동으로 해제됩니다.
*   새로운 데이터베이스 모델을 생성하거나 기존 Booking 모델에 새로운 상태를 추가하지 않고 기능을 구현합니다.

## 3. 기능 요구사항

### 3.1. 예약 시간대 임시 차단 (슈퍼유저 기능)

*   슈퍼유저 관리자 페이지(supers/supercreate/ 등 예약 관리 페이지)에 "온라인 예약 일괄 비활성화" 버튼을 추가합니다.
*   버튼 클릭 시, 현재 날짜 기준으로 향후 14일 (또는 설정 가능한 기간) 내의 모든 '예약가능' 상태인 예약 시간대에 대해 온라인 예약이 임시적으로 불가능해지도록 처리합니다.
*   이 차단 정보는 데이터베이스가 아닌 애플리케이션 캐시(Cache)에 저장하며, 각 시간대별 차단 정보는 설정된 만료 시간(3분)과 함께 저장됩니다.
*   버튼 클릭 시 성공/실패 피드백을 사용자에게 제공합니다.

### 3.2. 차단 상태 표시 및 관리

*   슈퍼유저 페이지에서 현재 차단 중인 시간대를 시각적으로 표시합니다 (예: 빨간색 배경, 아이콘 등).
*   "온라인 예약 수동 해제" 버튼을 추가하여 3분 전에 수동으로 차단을 해제할 수 있도록 합니다.
*   현재 차단 상태와 남은 시간을 실시간으로 확인할 수 있는 UI를 제공합니다.

### 3.3. 온라인 예약 시 차단 알림 (일반 사용자 기능)

*   온라인 예약 페이지(bookings/create/)에서 사용자가 예약 시간대를 선택하고 예약 확인 모달에서 "예약신청" 버튼을 클릭했을 때, 해당 시간대가 현재 캐시에 임시 차단되어 있는지 확인합니다.
*   만약 해당 시간대가 캐시에 임시 차단되어 있고 만료 시간이 지나지 않았다면, 예약 진행을 중단하고 사용자에게 모달 또는 알림 메시지로 "현재 병원에서 다른 환자의 예약이 진행 중이어서 요청하신 시간의 온라인 예약이 불가능합니다. 잠시 후 다시 시도해 주십시오." 를 표시합니다.
*   캐시에 차단 정보가 없거나 만료 시간이 지났다면, 정상적으로 예약 처리 로직을 진행합니다.

### 3.4. 임시 차단 자동 해제

*   캐시에 저장된 각 시간대의 임시 차단 정보는 저장 시 설정된 만료 시간(3분)이 지나면 자동으로 삭제(만료)됩니다.
*   캐시에서 정보가 만료되면 해당 시간대는 다시 온라인 예약 신청이 가능해집니다 (기존 '예약가능' 상태 유지).

### 3.5. 로깅 및 모니터링

*   차단/해제 이벤트에 대한 로그를 기록합니다 (시간, 사용자, 차단된 시간대 수 등).
*   시스템 관리자가 차단 기능 사용 현황을 모니터링할 수 있도록 합니다.

## 4. 기술 요구사항

*   기능 구현을 위해 Django 캐싱 프레임워크를 활용합니다. (백엔드는 설정에 따라 달라질 수 있음)
*   슈퍼유저의 일괄 비활성화 요청을 처리하기 위한 새로운 URL 패턴 및 뷰 함수를 superapp에 추가합니다.
*   bookingapp의 예약 처리 뷰 함수에 캐시 확인 로직을 추가합니다.
*   프론트엔드(JavaScript) 로직 수정이 필요할 수 있습니다 (예: 예약 확인 모달에서 차단 메시지 표시).
*   동시성 처리를 위한 캐시 키 충돌 방지 로직을 구현합니다.

## 5. 구현 시 고려사항

### 5.1. 캐시 백엔드 설정
*   현재 프로젝트의 캐시 설정을 확인하고 필요시 설정을 추가합니다.
*   프로덕션 환경에서는 Redis 등 영속적 캐시 사용을 권장합니다.
*   캐시 키 네이밍 규칙을 정의합니다 (예: `booking_block_{date}_{time}`).

### 5.2. 동시성 처리
*   여러 직원이 동시에 "일괄 비활성화" 버튼을 누르는 경우를 고려합니다.
*   캐시 키 충돌 방지를 위한 원자적 연산을 사용합니다.
*   중복 차단 요청에 대한 적절한 처리 로직을 구현합니다.

### 5.3. 사용자 피드백
*   슈퍼유저가 버튼을 눌렀을 때 성공/실패 피드백을 제공합니다.
*   현재 차단 상태를 확인할 수 있는 UI를 구현합니다.
*   차단된 시간대 수와 남은 시간 정보를 표시합니다.

## 6. 구현 우선순위

### 1단계: 기본 인프라 구축
*   Django 캐시 설정 확인 및 구성
*   캐시 키 관리 유틸리티 함수 작성
*   기본 차단/해제 로직 구현

### 2단계: 슈퍼유저 기능 구현
*   일괄 비활성화 버튼 및 뷰 함수 구현
*   수동 해제 버튼 구현
*   차단 상태 표시 UI 구현

### 3단계: 온라인 예약 차단 로직
*   bookingapp 뷰 함수에 차단 확인 로직 추가
*   사용자 알림 메시지 구현
*   프론트엔드 모달 수정

### 4단계: 고도화 기능
*   로깅 시스템 구현
*   실시간 상태 업데이트 (선택사항)
*   모니터링 대시보드 (선택사항)

## 7. 비고

*   캐시 백엔드 설정(로컬 메모리, Redis 등)에 따라 임시 차단 정보의 안정성과 공유 범위가 달라질 수 있습니다. 프로덕션 환경에서는 영속적인 캐시 백엔드 사용을 권장합니다.
*   일괄 비활성화 버튼 클릭 시 차단되는 기간(예: 14일)은 설정 또는 코드를 통해 조정 가능해야 합니다.
*   차단 메시지("현재 병원에서 다른 환자의 예약이 진행 중이어서 요청하신 시간의 온라인 예약이 불가능합니다. 잠시 후 다시 시도해 주십시오.")는 사용자 친화적으로 표시되어야 합니다.
*   시스템 부하를 고려하여 캐시 조회 최적화를 구현해야 합니다. 